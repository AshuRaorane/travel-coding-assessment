// <auto-generated />
using IntuitiveTestAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntuitiveTestAPI.Migrations
{
    [DbContext(typeof(TravelContext))]
    [Migration("20231203200905_RouteTable")]
    partial class RouteTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IntuitiveTestAPI.Airport", b =>
                {
                    b.Property<int>("AirportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AirportID"));

                    b.Property<int>("GeographyLevel1ID")
                        .HasColumnType("int");

                    b.Property<string>("IATACode")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("AirportID");

                    b.HasIndex("GeographyLevel1ID");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("IntuitiveTestAPI.Country", b =>
                {
                    b.Property<int>("GeographyLevel1ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeographyLevel1ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("GeographyLevel1ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("IntuitiveTestAPI.Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RouteID"));

                    b.Property<int>("ArrivalAirportID")
                        .HasColumnType("int");

                    b.Property<int>("DepartureAirportID")
                        .HasColumnType("int");

                    b.HasKey("RouteID");

                    b.HasIndex("ArrivalAirportID");

                    b.HasIndex("DepartureAirportID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("IntuitiveTestAPI.Airport", b =>
                {
                    b.HasOne("IntuitiveTestAPI.Country", "Country")
                        .WithMany("Airports")
                        .HasForeignKey("GeographyLevel1ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("IntuitiveTestAPI.Route", b =>
                {
                    b.HasOne("IntuitiveTestAPI.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IntuitiveTestAPI.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("IntuitiveTestAPI.Country", b =>
                {
                    b.Navigation("Airports");
                });
#pragma warning restore 612, 618
        }
    }
}
